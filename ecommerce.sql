-- 1   List all unique cities where customers are located.
SELECT DISTINCT customer_city from customers;



-- 2  Count the number of orders placed in 2017.
select count(order_id) from orders where year(order_purchase_timestamp) = 2017;



-- 3  Find the total sales per category.
SELECT 
    upper(products.product_category), round(SUM(payments.payment_value),2)
FROM
    products
        JOIN
    order_items ON order_items.product_id = products.product_id
        JOIN
    payments ON payments.order_id = order_items.order_id
GROUP BY product_category;


 --  4 Calculate the percentage of orders that were paid in installments.
SELECT 
    (SUM(CASE
        WHEN payment_installments >= 1 THEN 1
        ELSE 0
    END)) / COUNT(*) * 100
FROM
    payments;
    
    
--     Count the number of customers from each state.
select customer_state , count(customer_id) from customers group by customer_state;


-- Calculate the number of orders per month in 2018.
SELECT monthname(order_purchase_timestamp) as months, count(order_id) from orders where year(order_purchase_timestamp) = 2018 group by months;



-- Find the average number of products per order, grouped by customer city.
With count_per_order as
(select orders.order_id,orders.customer_id , count(order_items.order_id) as oc
from orders join order_items
on orders.order_id = order_items.order_id
group by orders.order_id,orders.customer_id)
select customers.customer_city,round(avg(count_per_order.oc),2)
from customers join count_per_order 
on customers.customer_id = count_per_order.customer_id
group by customers.customer_city
;


--  Calculate the percentage of total revenue contributed by each product category.
select products.product_category as category , round((sum(payments.payment_value))/(select sum(payment_value) from payments)*100,2) as total_revenue from products
join order_items on 
products.product_id = order_items.product_id join payments on
order_items.order_id = payments.order_id
group by category;

 --  Identify the correlation between product price and the number of times a product has been purchased.
SELECT 
    products.product_category,
    COUNT(order_items.product_id),
    ROUND(AVG(order_items.price), 2)
FROM
    products
        JOIN
    order_items ON products.product_id = order_items.product_id
GROUP BY product_category;


-- Calculate the total revenue generated by each seller, and rank them by revenue.
select * ,dense_rank() over(order by revenue desc ) as seller_rank from
(SELECT 
    order_items.seller_id,
    ROUND(SUM(payments.payment_value), 2) AS revenue
FROM
    order_items
        JOIN
    payments ON order_items.order_id = payments.order_id
GROUP BY seller_id)as a;


-- Calculate the moving average of order values for each customer over their order history.
select customer_id ,order_purchase_timestamp,payment,
avg(payment) over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row) as moving_avg 
from
(select orders.customer_id,orders.order_purchase_timestamp,
payments.payment_value as payment
from payments join orders
on payments.order_id = orders.order_id) as a;


-- Calculate the cumulative sales per month for each year
select years,months,payment,sum(payment)
over(order by years, months) as cumulative_sales from
(select year(orders.order_purchase_timestamp) as years,
month(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id
group by years,months
order by years,months asc) as a;


-- Calculate the year-over-year growth rate of total sales.
with a as
(SELECT 
    YEAR(orders.order_purchase_timestamp) AS years,
    ROUND(SUM(payments.payment_value), 2) AS payment
FROM
    orders
        JOIN
    payments ON orders.order_id = payments.order_id
GROUP BY years
ORDER BY years) 
select years,payment,lag(payment,1) over(order by years) previous_year,
((payment - lag(payment,1) over(order by years))/lag(payment,1) over(order by years))*100  year_over_year_growth from a;


-- Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
with a as (select customers.customer_id,
min(orders.order_purchase_timestamp) first_order
from customers join orders
on customers.customer_id = orders.customer_id
group by customers.customer_id),

b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) next_order
from a join orders
on orders.customer_id = a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order, interval 6 month)
group by a.customer_id) 

select 100 * (count( distinct a.customer_id)/ count(distinct b.customer_id)) 
from a left join b 
on a.customer_id = b.customer_id ;


-- Identify the top 3 customers who spent the most money in each year.
select years, customer_id, payment, d_rank
from
(select year(orders.order_purchase_timestamp) years,
orders.customer_id,
sum(payments.payment_value) payment,
dense_rank() over(partition by year(orders.order_purchase_timestamp)
order by sum(payments.payment_value) desc) d_rank
from orders join payments 
on payments.order_id = orders.order_id
group by year(orders.order_purchase_timestamp),
orders.customer_id) as a
where d_rank <= 3 ;













CREATE VIEW Count_Of_Customers_according_to_state as 
SELECT 
    customer_state,
    COUNT(customer_unique_id) number_of_customers
FROM
    customers
GROUP BY customer_state;

CREATE VIEW RR_state_data as 
SELECT * FROM customers where customer_state = "RR";



DELIMITER &&
CREATE PROCEDURE City_Data()
BEGIN
	SELECT count(customer_city) from customers;
    SELECT customer_city,count(customer_id) AS no_of_customer from customers group by customer_city ORDER BY no_of_customer DESC;
END &&
DELIMITER  ;
CALL City_Data();

Delimiter //
CREATE PROCEDURE get_limit(in var int)
begin
	SELECT * FROM customers limit var;
    select customer_state,count(customer_id) from customers group by customer_state limit var;
end //
Delimiter ;
CALL get_limit(4);

Delimiter //
CREATE PROCEDURE State_Data()
begin
	SELECT count(customer_state) FROM customers;
    select customer_state,count(customer_id) from customers group by customer_state;
end //
Delimiter ;


Delimiter //
CREATE PROCEDURE Total_payments(out var int)
begin
	SELECT count(order_id) into var FROM payments;
    -- select payment_type,sum(payment_value) into var from payments group by payment_type order by sum(payment_value) Desc;
end //
Delimiter ;

call ecommerce.total_payments(@a);
SELECT @a;